{
    "operations": {
        "users": {
            "httpMethod": "GET",
            "parameters": {
                "user_id": {
                    "description": "Identity of the user to get details for. Pass self to get details of the acting user.",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "users/{user_id}"
        },
        "users/leaderboard": {
            "httpMethod": "GET",
            "parameters": {
                "user_id": {
                    "description": "Number of friends' scores to return that are adjacent to your score, in ranked order. The current user's score is returned as well. An odd number of neighbors returns one more user ahead of the current user than behind. If the current user is at the top of the leaderboard, only the neighbors behind the current user are returned. If the current user is at the bottom of the leaderboard, only the neighbors ahead of the current user are returned. If neighbors is not specified, scores for all your friends are returned.",
                    "location": "query"
                }
            },
            "uri": "users/leaderboard"
        },
        "users/requests": {
            "httpMethod": "GET",
            "uri": "users/requests"
        },
        "users/search": {
            "httpMethod": "GET|POST",
            "parameters": {
                "phone": {
                    "description": "A comma-delimited list of phone numbers to look for.",
                    "location": "query"
                },
                "email": {
                    "description": "A comma-delimited list of email addresses to look for.",
                    "location": "query"
                },
                "twitter": {
                    "description": "A comma-delimited list of Twitter handles to look for.",
                    "location": "query"
                },
                "twitterSource": {
                    "description": "A single Twitter handle. Results will be users that this handle follows on Twitter who use Foursquare.",
                    "location": "query"
                },
                "fbid": {
                    "description": "A comma-delimited list of Facebook ID's to look for.",
                    "location": "query"
                },
                "name": {
                    "description": "A single string to search for in users' names.",
                    "location": "query"
                }
            },
            "uri": "users/search"
        },
        "users/badges": {
            "extends": "users",
            "uri": "users/{user_id}/badges"
        },
        "users/checkins": {
            "extends": "users",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 250.",
                    "location": "query"
                },
                "offset": {
                    "description": "The number of results to skip. Used to page through results.",
                    "location": "query"
                },
                "sort": {
                    "description": "How to sort the returned checkins. Can be newestfirst or oldestfirst.",
                    "location": "query"
                },
                "afterTimestamp": {
                    "description": "Retrieve the first results to follow these seconds since epoch. This should be useful for paging forward in time, or when polling for changes. To avoid missing results when polling, we recommend subtracting several seconds from the last poll time and then de-duplicating.",
                    "location": "query"
                },
                "beforeTimestamp": {
                    "description": "Retrieve the first results prior to these seconds since epoch. Useful for paging backward in time.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/checkins"
        },
        "users/friends": {
            "extends": "users",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/friends"
        },
        "users/lists": {
            "extends": "users",
            "parameters": {
                "group": {
                    "description": "can be created (lists created by this user), edited (other people's lists this user has edited), followed (lists this user follows), friends (lists from this user's friends), and suggested (lists relevant to the user's current location).",
                    "location": "query"
                },
                "ll": {
                    "description": "Location of the user, required in order to receive the suggested group.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/lists"
        },
        "users/mayorships": {
            "extends": "users",
            "uri": "users/{user_id}/mayorships"
        },
        "users/photos": {
            "extends": "users",
            "parameters": {
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/photos"
        },
        "users/tips": {
            "extends": "users",
            "parameters": {
                "sort": {
                    "description": "One of recent, nearby, or popular. Nearby requires geolat and geolong to be provided.",
                    "location": "query"
                },
                "ll": {
                    "description": "Latitude and longitude of the user's location.",
                    "location": "query"
                },
                "limit": {
                    "description": "Number of results to return, up to 500.",
                    "location": "query"
                },
                "offset": {
                    "description": "Used to page through results.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/tips"
        },
        "users/todos": {
            "extends": "users",
            "parameters": {
                "sort": {
                    "description": "One of nearby or recent. Nearby requires geolat and geolong to be provided.",
                    "location": "query"
                },
                "ll": {
                    "description": "Latitude and longitude of the user's location.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/todos"
        },
        "users/venuehistory": {
            "extends": "users",
            "parameters": {
                "beforeTimestamp": {
                    "description": "Seconds since epoch.",
                    "location": "query"
                },
                "afterTimestamp": {
                    "description": "Seconds after epoch.",
                    "location": "query"
                },
                "categoryId": {
                    "description": "Limits returned venues to those in this category. If specifying a top-level category, all sub-categories will also match the query.",
                    "location": "query"
                }
            },
            "uri": "users/{user_id}/venuehistory"
        },
        "users/approve": {
            "extends": "users",
            "httpMethod": "POST",
            "uri": "users/{user_id}/approve"
        },
        "users/deny": {
            "extends": "users",
            "httpMethod": "POST",
            "uri": "users/{user_id}/deny"
        },
        "users/request": {
            "extends": "users",
            "httpMethod": "POST",
            "uri": "users/{user_id}/request"
        },
        "users/setpings": {
            "extends": "users",
            "httpMethod": "POST",
            "parameters": {
                "value": {
                    "description": "True or false.",
                    "location": "query",
                    "required": true
                }
            },
            "uri": "users/{user_id}/setpings"
        },
        "users/unfriend": {
            "extends": "users",
            "httpMethod": "POST",
            "uri": "users/{user_id}/unfriend"
        },
        "users/update": {
            "httpMethod": "POST",
            "parameters": {
                "photo": {
                    "description": "Photo under 100KB in multipart MIME encoding with content type image/jpeg, image/gif, or image/png.",
                    "location": "query"
                }
            },
            "uri": "users/self/update"
        },
        "venues": {
            "httpMethod": "GET",
            "parameters": {
                "venue_id": {
                    "description": "ID of venue to retrieve",
                    "location": "uri",
                    "required": true
                }
            },
            "uri": "venues/{venue_id}"
        },
        "venues/add": {
            "httpMethod": "POST",
            "parameters": {
                "name": {
                    "description": "the name of the venue",
                    "location": "query",
                    "required": true
                },
                "address": {
                    "description": "The address of the venue.",
                    "location": "query"
                },
                "crossStreet": {
                    "description": "The nearest intersecting street or streets.",
                    "location": "query"
                },
                "city": {
                    "description": "The city name where this venue is.",
                    "location": "query"
                },
                "state": {
                    "description": "The nearest state or province to the venue.",
                    "location": "query"
                },
                "zip": {
                    "description": "The zip or postal code for the venue.",
                    "location": "query"
                },
                "phone": {
                    "description": "The phone number of the venue.",
                    "location": "query"
                },
                "twitter": {
                    "description": "The twitter handle of the venue.",
                    "location": "query"
                },
                "ll": {
                    "description": "Latitude and longitude of the venue, as accurate as is known.",
                    "location": "query",
                    "required": true
                },
                "primaryCategoryId": {
                    "description": "The ID of the category to which you want to assign this venue.",
                    "location": "query"
                },
                "description": {
                    "description": "A freeform description of the venue, up to 300 characters.",
                    "location": "query"
                },
                "url": {
                    "description": "The url of the homepage of the venue.",
                    "location": "query"
                },
                "ignoreDuplicates": {
                    "description": "A boolean flag telling the server to ignore duplicates and force the addition of this venue.",
                    "location": "query"
                },
                "ignoreDuplicateKey": {
                    "description": "equired if ignoreDuplicates is true. This key will be available in the response of the HTTP 409 error of the first (failed) attempt to add venue.",
                    "location": "query"
                }
            },
            "uri": "venues/add"
        },
        "venues/categories": {
            "httpMethod": "GET",
            "uri": "venues/categories"
        },
        "venues/explore": {
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "location": "query"
                },
                "near": {
                    "location": "query"
                },
                "llAcc": {
                    "location": "query"
                },
                "alt": {
                    "location": "query"
                },
                "altAcc": {
                    "location": "query"
                },
                "radius": {
                    "location": "query"
                },
                "section": {
                    "location": "query"
                },
                "query": {
                    "location": "query"
                },
                "limit": {
                    "location": "query"
                },
                "offset": {
                    "location": "query"
                },
                "novelty": {
                    "location": "query"
                },
                "friendVisits": {
                    "location": "query"
                },
                "time": {
                    "location": "query"
                },
                "day": {
                    "location": "query"
                },
                "venuePhotos": {
                    "location": "query"
                },
                "lastVenue": {
                    "location": "query"
                }
            },
            "uri": "venues/explore"
        },
        "venues/managed": {
            "httpMethod": "GET",
            "parameters": {
                "limit": {
                    "location": "query"
                },
                "offset": {
                    "location": "query"
                }
            },
            "uri": "venues/managed"
        },
        "venues/search": {
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "location": "query"
                },
                "near": {
                    "location": "query"
                },
                "llAcc": {
                    "location": "query"
                },
                "alt": {
                    "location": "query"
                },
                "altAcc": {
                    "location": "query"
                },
                "query": {
                    "location": "query"
                },
                "limit": {
                    "location": "query"
                },
                "intent": {
                    "location": "query"
                },
                "radius": {
                    "location": "query"
                },
                "sw": {
                    "location": "query"
                },
                "ne": {
                    "location": "query"
                },
                "categoryId": {
                    "location": "query"
                },
                "url": {
                    "location": "query"
                },
                "providerId": {
                    "location": "query"
                },
                "linkedId": {
                    "location": "query"
                }
            },
            "uri": "venues/search"
        },
        "venues/suggestcompletion": {
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "location": "query",
                    "required": true
                },
                "llAcc": {
                    "location": "query"
                },
                "alt": {
                    "location": "query"
                },
                "altAcc": {
                    "location": "query"
                },
                "query": {
                    "location": "query",
                    "required": true
                },
                "limit": {
                    "location": "query"
                },
                "intent": {
                    "location": "query"
                },
                "radius": {
                    "location": "query"
                }
            },
            "uri": "venues/suggestcompletion"
        },
        "venues/timeseries": {
            "httpMethod": "GET",
            "parameters": {
                "venueId": {
                    "location": "query"
                },
                "startAt": {
                    "location": "query"
                },
                "endAt": {
                    "location": "query"
                },
                "fields": {
                    "location": "query"
                }
            },
            "uri": "venues/timeseries"
        },
        "venues/trending": {
            "httpMethod": "GET",
            "parameters": {
                "ll": {
                    "location": "query",
                    "required": true
                },
                "limit": {
                    "location": "query"
                },
                "radius": {
                    "location": "query"
                }
            },
            "uri": "venues/trending"
        },
        "venues/events": {
            "extends": "venues",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/events"
        },
        "venues/herenow": {
            "extends": "venues",
            "httpMethod": "GET",
            "parameters": {
                "limit": {
                    "location": "query"
                },
                "offset": {
                    "location": "query"
                }
            },
            "uri": "venues/{venue_id}/herenow"
        },
        "venues/hours": {
            "extends": "venues",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/hours"
        },
        "venues/likes": {
            "extends": "venues",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/likes"
        },
        "venues/links": {
            "extends": "venues",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/links"
        },
        "venues/listed": {
            "extends": "venues",
            "httpMethod": "GET",
            "parameters": {
                "group": {
                    "location": "query"
                },
                "limit": {
                    "location": "query"
                },
                "offset": {
                    "location": "query"
                }
            },
            "uri": "venues/{venue_id}/listed"
        },
        "venues/menu": {
            "extends": "venues",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/menu"
        },
        "venues/nextvenues": {
            "extends": "venues",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/nextvenues"
        },
        "venues/photos": {
            "extends": "venues",
            "parameters": {
                "group": {
                    "location": "query"
                },
                "limit": {
                    "location": "query"
                },
                "offset": {
                    "location": "query"
                }
            },
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/photos"
        },
        "venues/similar": {
            "extends": "venues",
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/similar"
        },
        "venues/stats": {
            "extends": "venues",
            "parameters": {
                "startAt": {
                    "location": "query"
                },
                "endAt": {
                    "location": "query"
                }
            },
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/stats"
        },
        "venues/tips": {
            "extends": "venues",
            "parameters": {
                "sort": {
                    "location": "query"
                },
                "limit": {
                    "location": "query"
                },
                "offset": {
                    "location": "query"
                }
            },
            "httpMethod": "GET",
            "uri": "venues/{venue_id}/tips"
        },
        "venues/dislike": {
            "extends": "venues",
            "parameters": {
                "set": {
                    "default": 1,
                    "description": "If 1, dislike this venue. If 0 undo a previous dislike for this venue. Default value is 1",
                    "location": "query"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/dislike"
        },
        "venues/edit": {
            "extends": "venues",
            "parameters": {
                "name": {
                    "description": "The name of the venue.",
                    "location": "query"
                },
                "address": {
                    "description": "The address of the venue.",
                    "location": "query"
                },
                "crossStreet": {
                    "description": "The nearest intersecting street or streets.",
                    "location": "query"
                },
                "city": {
                    "description": "The city name where this venue is.",
                    "location": "query"
                },
                "state": {
                    "description": "The nearest state or province to the venue.",
                    "location": "query"
                },
                "zip": {
                    "description": "The zip or postal code for the venue.",
                    "location": "query"
                },
                "phone": {
                    "description": "The phone number of the venue.",
                    "location": "query"
                },
                "ll": {
                    "description": "Latitude and longitude of the venue",
                    "location": "query"
                },
                "categoryId": {
                    "description": "The IDs of the category or categories to which you want to assign this venue (separate multiple IDs with commas).",
                    "location": "query"
                },
                "twitter": {
                    "description": "The twitter handle of the venue.",
                    "location": "query"
                },
                "description": {
                    "description": "A freeform description of the venue, up to 300 characters.",
                    "location": "query"
                },
                "url": {
                    "description": "The url of the homepage of the venue.",
                    "location": "query"
                },
                "storeId": {
                    "description": "An identifier used by the manager of the venue to distinguish between venues of the same name. Only visible to managers.",
                    "location": "query"
                },
                "hours": {
                    "description": "The hours for the venue, as a semi-colon separated list of open segments and named segments (e.g., brunch or happy hour). Open segments are formatted as day,start,end. Named segments additionally have a label, formatted as day,start,end,label. Days are formatted as integers with Monday = 1,...,Sunday = 7. Start and End are formatted as [+]HHMM format. Use 24 hour format (no colon), prefix with 0 for HH or MM less than 10. Use '+' prefix, i.e., +0230 to represent 2:30 am past midnight into the following day.",
                    "location": "query"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/edit"
        },
        "venues/flag": {
            "extends": "venues",
            "parameters": {
                "problem": {
                    "description": "One of mislocated, closed, duplicate, inappropriate, doesnt_exist, event_over",
                    "location": "query",
                    "required": true
                },
                "venueId": {
                    "description": "ID of the duplicated venue (for problem duplicate)",
                    "location": "query"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/flag"
        },
        "venues/like": {
            "extends": "venues",
            "parameters": {
                "set": {
                    "default": 1,
                    "description": "If 1, like this venue. If 0 unlike (un-do a previous like) it. Default value is 1.",
                    "location": "query",
                    "required": true
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/like"
        },
        "venues/proposeedit": {
            "extends": "venues",
            "parameters": {
                "name": {
                    "description": "The name of the venue.",
                    "location": "query"
                },
                "address": {
                    "description": "The address of the venue.",
                    "location": "query"
                },
                "crossStreet": {
                    "description": "The nearest intersecting street or streets.",
                    "location": "query"
                },
                "city": {
                    "description": "The city name where this venue is.",
                    "location": "query"
                },
                "state": {
                    "description": "The nearest state or province to the venue.",
                    "location": "query"
                },
                "zip": {
                    "description": "The zip or postal code for the venue.",
                    "location": "query"
                },
                "phone": {
                    "description": "The phone number of the venue.",
                    "location": "query"
                },
                "ll": {
                    "description": "Latitude and longitude of the venue",
                    "location": "query"
                },
                "primaryCategoryId": {
                    "description": "The ID of the category to which you want to assign this venue.",
                    "location": "query"
                },
                "hours": {
                    "description": "The hours for the venue, as a semi-colon separated list of open segments and named segments (e.g., brunch or happy hour). Open segments are formatted as day,start,end. Named segments additionally have a label, formatted as day,start,end,label. Days are formatted as integers with Monday = 1,...,Sunday = 7. Start and End are formatted as [+]HHMM format. Use 24 hour format (no colon), prefix with 0 for HH or MM less than 10. Use '+' prefix, i.e., +0230 to represent 2:30 am past midnight into the following day.",
                    "location": "query"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/proposeedit"
        },
        "venues/setrole": {
            "extends": "venues",
            "parameters": {
                "userId": {
                    "description": "The id of the user or brand page for which we are changing roles at this venue",
                    "location": "query",
                    "required": true
                },
                "role": {
                    "description": "One of the values below, indicating the role that the user should receive at the venue.",
                    "location": "query",
                    "required": true
                },
                "visible": {
                    "description": "Determines whether managers are visible on the venue profile. Only applies to manager role.",
                    "location": "query"
                }
            },
            "httpMethod": "POST",
            "uri": "venues/{venue_id}/setrole"
        }
    }
}